library(devtools)
library(roxygen2)
library(usethis)
devtools::document()
devtools::install()
devtools::check()
devtools::document()
devtools::install()
devtools::check()
library(devtools)
library(roxygen2)
library(usethis)
devtools::document()
devtools::install()
devtools::check()
library(BaiSOFR)
?simulate_SOFR
data = simulate_SOFR(n = 500, p = 2, SNR = 5, num_z_continuous = 1, num_z_dummy = 1,
domain_X = c(0,2), max_obs = 150, subject_specific_domain = TRUE,
beta_types = c('spiky', 'smooth'))
# Check the output
str(data)
library(devtools)
library(roxygen2)
library(usethis)
devtools::document()
devtools::install()
devtools::check()
roxygen2::roxygenise()
devtools::build_vignettes()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(devtools)
library(roxygen2)
library(usethis)
devtools::document()
devtools::install()
devtools::check()
library(devtools)
library(roxygen2)
library(usethis)
devtools::document()
devtools::install()
devtools::check()
library(BaiSOFR)
?plot_BASOFR_fit
?fitBASOFR
data = simulate_SOFR(n = 1500, p = 3, SNR = 5, num_z_continuous = 5, num_z_dummy = 2,
beta_types = c('spiky','smooth','stepwise'), domain_X = c(0, 1),
max_obs = 105,
subject_specific_domain = TRUE)
# Scale the continuous z-variables to have std 1 and mean 0, and create the z-variables matrix
z = cbind(scale(data$Z_continuous), data$Z_dummy)
# Store original means and standard deviations of z-variables for later use
z_continuous_means = colMeans(data$Z_continuous, na.rm = TRUE)
z_continuous_sds = apply(data$Z_continuous, 2, sd, na.rm = TRUE)
# Fit the BASOFR model
BASOFR_fit <- fitBASOFR(y = data$y, X = data$X, t.grid = data$t.grid, z = z,
S = 1000, burnin = 1000)
library(devtools)
library(roxygen2)
library(usethis)
devtools::document()
devtools::install()
devtools::check()
library(devtools)
library(roxygen2)
library(usethis)
devtools::document()
devtools::install()
devtools::check()
library(BaiSOFR)
data = simulate_SOFR(n = 1500, p = 3, SNR = 5, num_z_continuous = 5, num_z_dummy = 2,
beta_types = c('spiky','smooth','stepwise'), domain_X = c(0, 1),
max_obs = 105,
subject_specific_domain = TRUE)
# Scale the continuous z-variables to have std 1 and mean 0, and create the z-variables matrix
z = cbind(scale(data$Z_continuous), data$Z_dummy)
# Store original means and standard deviations of z-variables for later use
z_continuous_means = colMeans(data$Z_continuous, na.rm = TRUE)
z_continuous_sds = apply(data$Z_continuous, 2, sd, na.rm = TRUE)
# Fit the BASOFR model
BASOFR_fit <- fitBASOFR(y = data$y, X = data$X, t.grid = data$t.grid, z = z,
S = 1000, burnin = 1000)
# Examine the items in the BASOFR_fit
str(BASOFR_fit)
# Obtain the ground truth beta
groundTruth = matrix(unlist(data$groundTruth$beta), byrow=TRUE, nrow=3)
# Plot the fit of the BASOFR model
plot_BASOFR_fit(BASOFR_fit, groundTruth)
?fitBASOFR
library(devtools)
library(roxygen2)
library(usethis)
devtools::document()
devtools::install()
devtools::check()
data = simulate_SOFR(n = 1500, p = 3, SNR = 5, num_z_continuous = 5, num_z_dummy = 2,
beta_types = c('spiky','smooth','stepwise'), domain_X = c(0, 1),
max_obs = 105,
subject_specific_domain = TRUE)
# Scale the continuous z-variables to have std 1 and mean 0, and create the z-variables matrix
z = cbind(scale(data$Z_continuous), data$Z_dummy)
# Store original means and standard deviations of z-variables for later use
z_continuous_means = colMeans(data$Z_continuous, na.rm = TRUE)
z_continuous_sds = apply(data$Z_continuous, 2, sd, na.rm = TRUE)
# Fit the BASOFR model
BASOFR_fit <- fitBASOFR(y = data$y, X = data$X, t.grid = data$t.grid, z = z,
S = 1000, burnin = 1000)
# Examine the items in the BASOFR_fit
str(BASOFR_fit)
library(devtools)
library(roxygen2)
library(usethis)
devtools::document()
devtools::install()
devtools::check()
library(devtools)
library(roxygen2)
library(usethis)
devtools::document()
devtools::install()
devtools::check()
library(BaiSOFR)
?Interpret_SOFR
## Not run:
# simulate the data for BASOFR
data = simulate_SOFR(n = 1000, p = 3, SNR = 5, num_z_continuous = 0, num_z_dummy = 1,
x.grids = seq(0, 1, length.out = 100), beta_types = c('spiky','smooth', 'stepwise'))
?fitBASOFR
# Simulate data for BASOFR
data = simulate_SOFR(n = 1500, p = 3, SNR = 5, num_z_continuous = 5, num_z_dummy = 2,
beta_types = c('spiky','smooth','stepwise'), domain_X = c(0, 1),
max_obs = 105,
subject_specific_domain = TRUE)
# Scale the continuous z-variables to have std 1 and mean 0, and create the z-variables matrix
z = cbind(scale(data$Z_continuous), data$Z_dummy)
# Store original means and standard deviations of z-variables for later use
z_continuous_means = colMeans(data$Z_continuous, na.rm = TRUE)
z_continuous_sds = apply(data$Z_continuous, 2, sd, na.rm = TRUE)
# Fit the BASOFR model
BASOFR_fit <- fitBASOFR(y = data$y, X = data$X, t.grid = data$t.grid, z = z,
S = 1000, burnin = 1000)
# Examine the items in the BASOFR_fit
str(BASOFR_fit)
# Obtain the ground truth beta
groundTruth = matrix(unlist(data$groundTruth$beta), byrow=TRUE, nrow=3)
# Plot the fit of the BASOFR model
plot_BASOFR_fit(BASOFR_fit, groundTruth)
?Intepret_SOFR
?Interpret_SOFR
# Plot the fit of the BASOFR model
plot_BASOFR_fit(BASOFR_fit, groundTruth)
# Decision Analysis
BayesSOFR <- BASOFR_fit # it does not have to be a BASOFR model
# Extract more interpretable locally constant estimates from the Bayesian SOFR model:
SOFR_Interpret <- Interpret_SOFR(beta.post = beta.post, Alpha.post = Alpha.post, intercept.post = intercept.post, sigma2.post = sigma2.post,
y = data$y, X = data$X, z=z, t.grid=data$t.grid)
# Extract more interpretable locally constant estimates from the Bayesian SOFR model:
SOFR_Interpret <- Interpret_SOFR(beta.post = BayesSOFR$beta.post, Alpha.post = BayesSOFR$Alpha.post,
intercept.post = BayesSOFR$intercept.post,
sigma2.post = BayesSOFR$sigma2.post,
y = data$y, X = data$X, z=z, t.grid=data$t.grid)
devtools::load_all()
beta.post = BayesSOFR$beta.post;
Alpha.post = BayesSOFR$Alpha.post;
intercept.post = BayesSOFR$intercept.post
sigma2.post = BayesSOFR$sigma2.post,
beta.post = BayesSOFR$beta.post;
Alpha.post = BayesSOFR$Alpha.post;
intercept.post = BayesSOFR$intercept.post
sigma2.post = BayesSOFR$sigma2.post,
beta.post = BayesSOFR$beta.post;
Alpha.post = BayesSOFR$Alpha.post;
intercept.post = BayesSOFR$intercept.post
sigma2.post = BayesSOFR$sigma2.post
y = data$y; X = data$X; z=z; t.grid=data$t.grid
n = length(y)
# stored iterations in the MCMC
S = dim(beta.post)[2]
p = dim(beta.post)[1]
# check if S is greater than 1000
if(S > 1000) {
cat('The posterior distribution has more than 1000 samples. We will reduce this to 1000 by evenly sampling across the distribution.\n')
# create an evenly spaced sequence of 1000 indices spanning the range of S
indices <- round(seq(from = 1, to = 1001, length.out = 1000))
# use these indices to select the corresponding slices from each array
beta.post <- beta.post[, indices, ]
if(!is.null(Alpha.post)){
Alpha.post <- Alpha.post[indices,]
}
intercept.post <- intercept.post[indices]
sigma2.post <- as.matrix(sigma2.post[indices,])
}
cat("Start calculating the aggregated trajectories of the functional covariates...")
# 1. obtain the aggregated trajectories
x.subdomain.aver.K <- get_aggregated_trajectory(X = X, t.grid = t.grid, K=K)
K=20
# 1. obtain the aggregated trajectories
x.subdomain.aver.K <- get_aggregated_trajectory(X = X, t.grid = t.grid, K=K)
gc()
cat("Start to solve the 'fit-to-the-fit' to obtain the locally constant estimates...")
# 2.1 obtain the target variable of the "fit-to-the-fit" using pseudo-data
h_bar <- get_h_bar(X = X,
beta.post = beta.post,
t.grid = t.grid)
# 2.2 obtain the locally constant estimates
locallyConstant_fitToAFit <- get_locallyconstant(h_bar=h_bar, x.subdomain.aver.K=x.subdomain.aver.K,
beta.post=beta.post, Alpha.post=Alpha.post, intercept.post=intercept.post,sigma2.post = sigma2.post,
t.grid=t.grid, y=y, X=X, z=z,
plot_all_locally_constant=plot_all_locally_constant)
n =  dim(x.subdomain.aver.K[[1]])[1]
p = length(x.subdomain.aver.K)
S = dim(beta.post)[2]
K = dim(x.subdomain.aver.K[[1]])[2]
grid.length = (max(t.grid) - min(t.grid))/ (length(t.grid)-1)
partition.K = seq(min(t.grid), max(t.grid), length.out=(K + 1))
X = lapply(X, function(Xp) swapNAwith0(Xp))
# Check if both Alpha.post and z are non-null
if (!is.null(Alpha.post) && !is.null(z)) {
# calculate Alpha.post.mean
Alpha.post.mean = apply(Alpha.post, 2, mean)
} else if ((as.numeric(is.null(Alpha.post)) + as.numeric(is.null(z))) == 1) {
# if one of Alpha.post, z is null and the other is non-null, then there is something wrong going on
stop("Alpha.post and z should be either both non-null or both null.")
}
intercept.post.mean = mean(intercept.post)
beta.post.mean = array(NA, dim=c(p, dim(beta.post)[3]))
beta.95CI = array(NA,  dim=c(p, dim(beta.post)[3], 2))
for (j in 1:p) {
beta.post.mean[j, ] = apply(beta.post[j,,], 2, mean)
beta.95CI[j,,] = t(apply(beta.post[j,,], 2, function(x) quantile(x, c(0.025,0.975))))
}
beta.95CI
domain_K = matrix(NA, nrow = K, ncol = 2)
for (i in 1:K){
left_boundary = partition.K[i]
right_boundary= partition.K[i+1]
if(i != K){
domain.k = which(t.grid >= left_boundary & t.grid < right_boundary)
}else{domain.k = which(t.grid >= left_boundary)}
domain_K[i,] = c(min(domain.k), max(domain.k))
}
domain_K
# penalization matrix
D1 = diff(diag(K), diff=1)
fusedlasso_output = list()
# first fit fusedlasso
for (j in 1:p){fusedlasso_output[[j]] = genlasso::fusedlasso(y = h_bar[[j]], X = x.subdomain.aver.K[[j]], D=D1); gc()}
# store the unique models for each functional covariates
model.sum = lapply(fusedlasso_output, function(fusedlasso_output_j) get_unique_locallyConstant(fusedlasso_output_j, K))
# then refit and store the point and predictive MSE
posterior_predictive_dist <- get_posterior_predictive(X, t.grid, beta.post, sigma2.post, add_noise = TRUE)
class(sigma2.post)
sigma2.post
sigma2.post = BayesSOFR$sigma.2.post
# Extract more interpretable locally constant estimates from the Bayesian SOFR model:
SOFR_Interpret <- Interpret_SOFR(beta.post = BayesSOFR$beta.post, Alpha.post = BayesSOFR$Alpha.post,
intercept.post = BayesSOFR$intercept.post,
sigma2.post = BayesSOFR$sigma.2.post,
y = data$y, X = data$X, z=z, t.grid=data$t.grid)
SOFR_Interpret <- Interpret_SOFR(beta.post = beta.post, Alpha.post = Alpha.post, intercept.post = intercept.post, sigma2.post = sigma.2.post,
library(devtools)
library(roxygen2)
library(usethis)
devtools::document()
devtools::install()
devtools::check()
roxygen2::roxygenise()
usethis::use_vignette("BaiSOFR")
The Bayesian Adaptive Scalar-on-Function Regression method serves as a useful tool for estimating and making inferences for $\beta_j$. Specifically designed to adapt to both smooth and rapid changes, the BASOFR model applies a B-spline basis expansion for each $\beta_j$ and employs a dynamic horseshoe prior [@kowal2019dynamic] on the second difference of the basis coefficients. This is defined for $j=1,...,p$ as:
1492/896
16/9
9*1.665179
1492/896
4/3
16/9
library(BaiSOFR)
10125/4.5
# Create a sample dataframe
df <- data.frame(
bmonth1 = c(0, 1, 0, 0),
bmonth2 = c(1, 0, 0, 0),
bmonth3 = c(0, 0, 0, 0),
bmonth4 = c(0, 0, 1, 0),
bmonth5 = c(0, 0, 0, 0),
bmonth6 = c(0, 0, 0, 0),
bmonth7 = c(0, 0, 0, 1),
bmonth8 = c(0, 0, 0, 0),
bmonth9 = c(0, 0, 0, 0),
bmonth10 = c(0, 0, 0, 0),
bmonth11 = c(0, 0, 0, 0),
bmonth12 = c(0, 0, 0, 0)
)
# Use max.col() to get the month
df$birthmonth <- max.col(df, ties.method = "first")
print(df$birthmonth)
df
# Create a sample dataframe
df <- data.frame(
birthmonth = c(1, 2, 1, 3, 2, 3),
col1 = c(NA, 2, 3, NA, 5, 6),
col2 = c(5, NA, 7, 8, 9, NA)
)
# Group by birthmonth and obtain the average for other columns
avg_df <- df %>%
group_by(birthmonth) %>%
summarise_all(~mean(.x, na.rm = TRUE))
# Assuming you have the dplyr package installed and loaded
library(dplyr)
# Create a sample dataframe
df <- data.frame(
birthmonth = c(1, 2, 1, 3, 2, 3),
col1 = c(NA, 2, 3, NA, 5, 6),
col2 = c(5, NA, 7, 8, 9, NA)
)
# Group by birthmonth and obtain the average for other columns
avg_df <- df %>%
group_by(birthmonth) %>%
summarise_all(~mean(.x, na.rm = TRUE))
print(avg_df)
df
library(BaiSOFR)
devtools::build_vignettes()
